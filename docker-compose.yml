services:
  # --- PostgreSQL コンテナ ---
  postgres:
    image: postgres:17
    container_name: minapp-postgres
    restart: always
    env_file:
      - backend/.env
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-app_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:                     # ★ DB起動完了を確認してから backend を動かす
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-app_db}"]
      interval: 5s
      timeout: 3s
      retries: 10

  # --- FastAPI バックエンド ---
  backend:
    build: ./backend
    container_name: minapp-backend
    depends_on:
      postgres:
        condition: service_healthy   # ★ PostgreSQL の healthcheck 成功を待機
    env_file:
      - backend/.env
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/app/app/gcp-key.json  # ★ GCP認証キーの絶対パス（コンテナ内）
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-app_db}
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/app               # backendディレクトリをコンテナの/appにマウント
    command: >
      sh -c "uvicorn app.main:app --host 0.0.0.0 --port 8080 --reload"

  # --- React + Vite フロントエンド ---
  frontend:
    build:
      context: ./frontend
      dockerfile: ${FRONT_DOCKERFILE:-Dockerfile.dev}   # ← dev / prod 切替可能
    container_name: minapp-frontend
    depends_on:
      - backend
    environment:
      - VITE_API_BASE=http://localhost:8080/api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "${FRONT_PORT:-5173}:${FRONT_PORT:-5173}"       # ← ポートも切替可能
    command: >
      sh -c "npm install && npm run ${FRONT_CMD:-dev} -- --host 0.0.0.0"

volumes:
  postgres_data:
